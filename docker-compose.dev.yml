version: '3.8'

services:
  # Infrastructure services
  mongodb:
    extends:
      file: docker-compose.yml
      service: mongodb

  redis:
    extends:
      file: docker-compose.yml
      service: redis

  kafka:
    extends:
      file: docker-compose.yml
      service: kafka

  zookeeper:
    extends:
      file: docker-compose.yml
      service: zookeeper

  mailhog:
    extends:
      file: docker-compose.yml
      service: mailhog

  minio:
    extends:
      file: docker-compose.yml
      service: minio

  # Microservices
  user-service:
    build:
      context: ./backend/services/user-service
      dockerfile: Dockerfile
    container_name: verpa-user-service-dev
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      SERVICE_NAME: user-service
      # MongoDB
      MONGODB_URI: mongodb://verpa_admin:verpa_secure_password_2024@mongodb:27017/verpa?authSource=admin
      # Kafka
      KAFKA_BROKERS: kafka:9094
      KAFKA_CLIENT_ID: user-service
      KAFKA_GROUP_ID: user-service-group
      # JWT
      JWT_SECRET: verpa_jwt_secret_dev_2024
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_EXPIRES_IN: 30d
      # OAuth (placeholder values for dev)
      GOOGLE_CLIENT_ID: placeholder
      GOOGLE_CLIENT_SECRET: placeholder
      APPLE_CLIENT_ID: placeholder
      APPLE_KEY_ID: placeholder
      FACEBOOK_APP_ID: placeholder
      FACEBOOK_APP_SECRET: placeholder
      # Frontend
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    networks:
      - verpa-network
    volumes:
      - ./backend/services/user-service:/app
      - /app/node_modules

  aquarium-service:
    build:
      context: ./backend/services/aquarium-service
      dockerfile: Dockerfile
    container_name: verpa-aquarium-service-dev
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3002
      SERVICE_NAME: aquarium-service
      # MongoDB
      MONGODB_URI: mongodb://verpa_admin:verpa_secure_password_2024@mongodb:27017/verpa?authSource=admin
      # Kafka
      KAFKA_BROKERS: kafka:9094
      KAFKA_CLIENT_ID: aquarium-service
      KAFKA_GROUP_ID: aquarium-service-group
      # JWT
      JWT_SECRET: verpa_jwt_secret_dev_2024
    ports:
      - "3002:3002"
    networks:
      - verpa-network
    volumes:
      - ./backend/services/aquarium-service:/app
      - /app/node_modules

  event-service:
    build:
      context: ./backend/services/event-service
      dockerfile: Dockerfile
    container_name: verpa-event-service-dev
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3003
      SERVICE_NAME: event-service
      # MongoDB
      MONGODB_URI: mongodb://verpa_admin:verpa_secure_password_2024@mongodb:27017/verpa?authSource=admin
      # Kafka
      KAFKA_BROKERS: kafka:9094
      KAFKA_CLIENT_ID: event-service
      KAFKA_GROUP_ID: event-service-group
      # JWT
      JWT_SECRET: verpa_jwt_secret_dev_2024
    ports:
      - "3003:3003"
    networks:
      - verpa-network
    volumes:
      - ./backend/services/event-service:/app
      - /app/node_modules

  notification-service:
    extends:
      file: docker-compose.yml
      service: notification-service
    container_name: verpa-notification-service-dev
    volumes:
      - ./backend/services/notification-service:/app
      - /app/node_modules

  media-service:
    extends:
      file: docker-compose.yml
      service: media-service
    container_name: verpa-media-service-dev
    volumes:
      - ./backend/services/media-service:/app
      - /app/node_modules

  api-gateway:
    build:
      context: ./backend/services/api-gateway
      dockerfile: Dockerfile
    container_name: verpa-api-gateway-dev
    restart: unless-stopped
    depends_on:
      - user-service
      - aquarium-service
      - event-service
      - notification-service
      - media-service
      - redis
    environment:
      NODE_ENV: development
      SERVICE_PORT: 3000
      SERVICE_NAME: api-gateway
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: verpa_redis_password_2024
      # Service URLs
      USER_SERVICE_URL: http://user-service:3001
      AQUARIUM_SERVICE_URL: http://aquarium-service:3002
      EVENT_SERVICE_URL: http://event-service:3003
      NOTIFICATION_SERVICE_URL: http://notification-service:3004
      MEDIA_SERVICE_URL: http://media-service:3005
      # CORS
      CORS_ORIGIN: http://localhost:3000
      CORS_CREDENTIALS: true
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
      # Internal API Key
      INTERNAL_API_KEY: verpa_internal_api_key_dev
    ports:
      - "3000:3000"
    networks:
      - verpa-network
    volumes:
      - ./backend/services/api-gateway:/app
      - /app/node_modules

networks:
  verpa-network:
    external: true