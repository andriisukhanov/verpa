# Docker Compose for Production
# Use: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

version: '3.8'

services:
  mongodb:
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb_data:/data/db
      - mongodb_backup:/backup
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  redis:
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru --save 60 1 --save 300 10 --save 900 100
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  kafka:
    restart: always
    environment:
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Remove development UI tools
  mongo-express:
    deploy:
      replicas: 0

  redis-commander:
    deploy:
      replicas: 0

  kafka-ui:
    deploy:
      replicas: 0

  # Production monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: verpa-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - verpa-network

  grafana:
    image: grafana/grafana:latest
    container_name: verpa-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - verpa-network

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: verpa-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - verpa-network

  # Backup service
  mongodb-backup:
    image: mongo:7.0
    container_name: verpa-mongodb-backup
    restart: always
    depends_on:
      - mongodb
    environment:
      MONGO_HOST: mongodb
      MONGO_PORT: 27017
      MONGO_USER: ${MONGO_ROOT_USERNAME}
      MONGO_PASS: ${MONGO_ROOT_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
      BACKUP_RETENTION_DAYS: 7
    volumes:
      - mongodb_backup:/backup
      - ./scripts/backup-mongodb.sh:/usr/local/bin/backup-mongodb.sh:ro
    command: crond -f -d 8
    networks:
      - verpa-network

volumes:
  mongodb_backup:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local